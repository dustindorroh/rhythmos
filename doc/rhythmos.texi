\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename rhythmos.info
@include version.texi
@settitle RhythmOS Reference Manual @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header

@copying
This text is a description of the features that are present in the
@code{RhythmOS} kernel (version @value{VERSION}, @value{UPDATED}).

This is Edition @value{EDITION}, last updated @value{UPDATED}, 
of @cite{RhythmOS Reference Manual}, 
for @code{RhythmOS}, Version @value{VERSION}.

Copyright @copyright{} 2015 Dustin Dorroh (@email{dustindorroh@@gmail.com})

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.

@end quotation
@end copying

@dircategory Basics
@direntry
* RhythmOS: (rhythmos).               barebones @sc{unix}-like kernel
@end direntry

@titlepage
@title RhythmOS Reference Manual
@subtitle Reference Documentation for RhythmOS
@subtitle Edition @value{EDITION}, for @code{RhythmOS} Version @value{VERSION}.
@subtitle @value{UPDATED}
@author Dustin Dorroh (@email{dustindorroh@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top, Overview, (dir), (dir)
@top RhythmOS

This manual is for @code{RhythmOS} (version @value{VERSION}, @value{UPDATED}),
which is a an attempt at a barebones @sc{unix}-like kernel
@end ifnottex

@menu
* Overview::                    General purpose and information.
* Toolchain Setup::             Build a RhythmOS Toolchain
* Building RhythmOS::           Steps to compile and build RhythmOS.
* Running RhythmOS::            Steps to run RhythmOS
* Programming the kernel::      
* Multitasking::                Interrupt handling
* Memory::                      Paging and virtual memory
* Dynamic Memory Allocation::   
* System calls::                
* I/O::                         
* Filesystems::                 
* Reporting bugs::              Sending bug reports and feature suggestions.

@detailmenu
 --- The Detailed Node Listing ---

Overview

* RhythmOS Features::           
* Source Code::                 

Toolchain Setup

* Build Environment::           
* Source Download::             
* Binutils::                    
* GCC::                         
* C Library::                   

Building RhythmOS

* Build Internals::             

Build Internals

* Linking::                     
* Kernel Image::                
* Filesystem Image::            
* Bootloader Image::            

Linking

* Linker Invocation::           
* link.ld::                     

link.ld

* Kernel Image::       
* Filesystem Image::   
* Bootloader Image::   

Programming the kernel

* Assembly::                    
* C::                           

C

* The Run-Time Library::        

@end detailmenu
@end menu

@node Overview, Toolchain Setup, Top, Top
@chapter Overview
@cindex Overview

This manual is for @code{RhythmOS} (version @value{VERSION},
@value{UPDATED}), which is a an attempt at a barebones @sc{unix}-like
kernel. This document intends to cover the how to build, use, and
develop on Rhythmos as well as explain in depth some of the kernel
internals. For up to date news check the project home which is located
at @uref{http://code.google.com/p/rhythmos/}

@menu
* RhythmOS Features::           
* Source Code::                 
@end menu

@node RhythmOS Features, Source Code, Overview, Overview
@subsection RhythmOS Features
@cindex RhythmOS Features

@itemize @bullet
@item
Small C library
@item
Kernel mode and user mode
@item
Basic Multitasking through the use of context switches and
 memory protection
@item
Dynamic memory allocation (using buddy allocation technique)
@item
Virtual memory
@item
Kernel Paging
@item
UNIX-like system calls:
@itemize @minus
Process management: @code{fork}, @code{kill}, @code{execve},
@code{waitpid} @dots{}
@item
Interprocess Communication (IPC): pipe, dup
@end itemize
@item
Read only filesystem
@end itemize

@cindex authors
@cindex Dustin, Dorroh

@node Source Code,  , RhythmOS Features, Overview
@subsection Source Code
@cindex Source Code

Use git to clone a copy of the source tree. Use the command below to
clone the RhythmOS repository.
@example
@code{git clone https://code.google.com/p/rhythmos/}
@end example

@c The location of your project workspace is up to you, but I strongly
@c encourage you @strong{not} to pick a system-wide entry such as
@c @file{/usr} or @file{/usr/local}. Developing in your home folder
@c reduces the possibly of affecting other users, or @emph{visa versa},
@c with your project.

@c To be able to explain and navigate the source tree,
@c @env{PRJROOT} will corespond to @code{RhythmOS}'s root project
@c directory.

@c @cindex PRJROOT
@c @strong{Example:}
@c @example
@c If RhythmOSâ€™s project directory is located in @file{@env{$HOME}}, then
@c    @env{PRJROOT}=@file{$@env{HOME}/rhythmos}
@c @end example

@c From here on all paths will be relative to @env{PRJROOT} unless
@c otherwise noted.

@c @strong{Examples:}
@c @example
@c  @file{src}=@file{@env{PRJROOT}/src}
@c  @file{src/libc.c}=@file{@env{PRJROOT}/src/libc.c}
@c @end example

@node Toolchain Setup, Building RhythmOS, Overview, Top
@chapter Toolchain Setup
@cindex Toolchain Setup
Build a RhythmOS Toolchain

If your native architecture is x86 then you will most likely already
have a toolchain that will work for RhythmOS. If your architecture is
something else you will have to build an toolchain to cross compile to
x86. 

@settitle Find your architecture

You can find your architecture in Linux from one of the following
commands:

@example
$ arch x86_64

$ lscpu | grep Arch
Architecture:          x86_64

$ uname -m
x86_64
@end example

@menu
* Build Environment::           
* Source Download::             
* Binutils::                    
* GCC::                         
* C Library::                   
@end menu

@node Build Environment, Source Download, Toolchain Setup, Toolchain Setup
@section Build Environment
@cindex Build Environment

Export build variables 
@example
$ export PREFIX=/usr/local/cross 
$ export TARGET=i386-elf
@end example


Create build directories for gcc binutils and newlibc 
@example
$ mkdir -p build/{gcc,binutils,newlib}
$ sudo mkdir /usr/local/cross
@end example

@node Source Download, Binutils, Build Environment, Toolchain Setup
@comment  node-name,  next,  previous,  up
@section Source Download
@cindex Source Download

Download and extract Binutils and gcc and newlibc 
@example
$ wget http://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2
$ wget http://ftp.gnu.org/gnu/gcc/gcc-4.6.2/gcc-4.6.2.tar.bz2
$ wget ftp://sources.redhat.com/pub/newlib/newlib-1.20.0.tar.gz
$ tar xjvf binutils-2.21.1a.tar.bz2  
$ tar xjvf gcc-4.6.2.tar.bz2  
$ tar xzvf newlib-1.20.0.tar.gz
@end example

Download @acronym{gmp} @acronym{mpfr} and @acronym{mpc} required by @acronym{gcc}
@example
$ wget ftp://ftp.gmplib.org/pub/gmp-5.0.2/gmp-5.0.2.tar.bz2
$ wget http://www.mpfr.org/mpfr-current/mpfr-3.1.0.tar.bz2
$ wget http://www.multiprecision.org/mpc/download/mpc-0.9.tar.gz
@end example

Extract @acronym{gmp} @acronym{mpfr} and @acronym{mpc} into the gcc
directory so that gcc will build them automatically
@example
$ cd gcc-4.6.2 
$ tar xjvf ../gmp-5.0.2.tar.bz2 && mv gmp-5.0.2/ gmp 
$ tar xjvf ../mpfr-3.1.0.tar.bz2 && mv mpfr-3.1.0/ mpfr 
$ tar xzvf ../mpc-0.9.tar.gz  && mv mpc-0.9/ mpc 
$ cd ..
@end example

@node Binutils, GCC, Source Download, Toolchain Setup
@comment  node-name,  next,  previous,  up
@section Binutils
@cindex Binutils

Configure Binutils 
@example$ cd build/binutils/
$ ../../binutils-2.21.1/configure --target=$TARGET \
                                  --prefix=$PREFIX \
                                  --disable-nls
@end example

Make and Install Binutils 
@example
$ make all 
$ sudo make install 
$ cd ../..
@end example


@node GCC, C Library, Binutils, Toolchain Setup
@comment  node-name,  next,  previous,  up
@section GCC
@cindex GCC

Setup Environment 
@example
$ export PATH=$PATH:$PREFIX/bin
@end example

Configure GCC 
@example
$ cd build/gcc 
$ ../../gcc-4.6.2/configure  --target=$TARGET \
                             --prefix=$PREFIX \
                             --disable-nls \
                             --enable-languages=c \
                             --without-headers
@end example

Make And Install GCC 
@example$ 
make all-gcc  
$ sudo make install-gcc 
$ cd ../..
@end example

@node C Library,  , GCC, Toolchain Setup
@comment  node-name,  next,  previous,  up
@section C Library
@cindex C Library

Configure Newlib 
@example
$ cd build/newlib 
$ ../../newlib-1.20.0/configure --target=$TARGET \
                                --prefix=$PREFIX
@end example


Make and Install Newlib 
@example
$ make all 
$ sudo make install
@end example


Run command below if @code{sudo make install} cant find utils in
@file{/usr/cross/bin}
@example
$ sudo ln -s /usr/local/cross/bin/i386-elf-* /usr/local/bin 
$ sudo make install
@end example

@node  Building RhythmOS, Running RhythmOS, Toolchain Setup, Top
@chapter Building RhythmOS
@cindex Building RhythmOS

From the top level project directory execute the configure script.
@example
$ ./configure
@end example

To build everything just type @command{`make'}. This should build the
kernel image @file{kernel.img}, the file system image
@file{filesystem.img}, and the grub boot image @file{grub.img}
@example
$ make
@end example
To only build root file system type @command{`make fs'}. To only build
the bootloader type @command{`make boot'}.

@menu
* Build Internals::             
@end menu

@node Build Internals,  , Building RhythmOS, Building RhythmOS
@section Build Internals
@cindex Build Internals

@menu
* Linking::                     
* Kernel Image::                
* Filesystem Image::            
* Bootloader Image::            
@end menu

@c @node name, next, previous, up
@node Linking, Kernel Image, Build Internals, Build Internals
@subsection Linking
@cindex Linking

The linker combines input files into a single output file. The output
file and each input file are in a special data format known as an object
file format. Each file is called an object file. The output file is
often called an executable, but for our purposes we will also call it an
object file. Each object file has, among other things, a list of
sections. We sometimes refer to a section in an input file as an input
section; similarly, a section in the output file is an output section.


You can see the sections in an object file by using the
@command{objdump} program with the @option{-h} option. Every object file
also has a list of symbols, known as the symbol table. A symbol may be
defined or undefined. Each symbol has a name, and each defined symbol
has an address.

@c @node name, next, previous, up
@menu
* Linker Invocation::           
* link.ld::                     
@end menu

@node Linker Invocation, link.ld, Linking, Linking
@unnumberedsubsubsec Linker Invocation
@cindex Linker Invocation

@example
# Link using @file{link.ld}
$(KERNEL_IMG): $(KERNEL_OBJECTS)
    $(LD) @option{-T} @file{link.ld} @option{-o} $(KERNEL_IMG) $(KERNEL_OBJECTS)
@end example

The @option{-T} option instructs the linker @command{ld} to use the
commands in the script file @file{link.ld}. It specifies the various
segments used by the program. In the file we specify 3 segments:

@itemize
@center
@bullet{@code{.text} - Code segment}

@bullet{@code{.data} - Data segment}

@bullet{@code{.bss} -  Stack segment}
@end itemize

@c @node name, next, previous, up
@node link.ld,  , Linker Invocation, Linking
@unnumberedsubsubsec link.ld
@cindex link.ld

@center
@example
@code{OUTPUT_FORMAT("binary")}
@code{ENTRY(start)}
@code{phys = 0x00100000;}
@code{SECTIONS}
@code{@{}
@code{  .text phys : AT(phys) @{}
@code{    code = .;}
@code{    *(.text)}
@code{    *(.rodata)}
@code{    . = ALIGN(4096);}
@code{  @}}
@code{  .data : AT(phys + (data - code))}
@code{  @{}
@code{    data = .;}
@code{    *(.data)}
@code{    . = ALIGN(4096);}
@code{  @}}
@code{  .bss : AT(phys + (bss - code))}
@code{  @{}
@code{    bss = .;}
@code{    *(.bss)}
@code{    . = ALIGN(4096);}
@code{  @}}
@code{ . = ALIGN(4096);}
@code{  end = .;}
@code{@}}
@end example



In order for @code{RhythmOS} to be able to boot properly, three different
binary images are needed (@pxref{Building RhythmOS}). The @emph{images} also
have to be made in a particular order due to the build dependencies,
thus the build process naturally falls into a three step process:

@enumerate
@item
Kernel Image (@pxref{Kernel Image})
@item
Filesystem Image (@pxref{Filesystem Image})
@item
Bootloader Image (@pxref{Bootloader Image})
@end enumerate

@menu
* Kernel Image::       
* Filesystem Image::   
* Bootloader Image::   
@end menu

@node Kernel Image, Filesystem Image, Linking, Build Internals
@unnumberedsubsec Kernel Image
@cindex Generate Kernel Image

Executing @command{make} compiles individual source (@code{.c}) into
object files (@code{.o}). The linker (@command{ld}) is then used next to
link the object files into one binary
@file{src/kernel.img}. @xref{Assembly}.


@node Filesystem Image, Bootloader Image, Kernel Image, Build Internals
@unnumberedsubsec Filesystem Image
@cindex Filesystem Image


The @command{make fs} target executes the build script
@file{mk_filesystem_image.sh} located in @file{src}, the project's
source directory.

The srcipt @file{mk_filesystem_image.sh} creates empty directories in
the project tree, which will be a staging place for the root files that
will be used by RhythmOS. Next, the programs that will run on the kernel (ie
@command{sh}, @command{ls}, @command{cat}, etc ... ) will be copied to
the appropiate staging directory @footnote{For example binaries will
placed in @file{rootfs/bin} directory on the host machine}. An example
of how rootfs might be structured.

@example
$ tree rootfs/
rootfs/
|-- bin
|   |-- cat
|   |-- find
|   |-- ls
|   |-- pwd
|   `-- sh
|-- etc
`-- usr
@end example

An image, based off of the staging filesystem, is then built up in
memory @footnote{ @emph{See} @file{fstool.c} in the project source to
see how the image is created}. When complete the filesystem image will
be located @file{src/filesystem.img}.

@node Bootloader Image,  , Filesystem Image, Build Internals
@unnumberedsubsec Bootloader Image
@cindex Bootloader Image

In order to run the kernel, itâ€™s necessary to use a boot loader. This is
the first thing that runs when a computer starts, and is responsible for
loading the kernel file into memory and instructing the processor to
start executing it.

The @file{grub.img} is the @acronym{GRUB} image that we will as are
bootloader. This file contains our kernel image and our file system
image.

@example
$ mkdir floppy
$ sudo mount src/grub.img floppy
$ tree floppy/
floppy/
|-- boot
|   `-- grub
|       |-- fat_stage1_5
|       |-- menu.lst
|       |-- stage1
|       `-- stage2
|-- filesystem.img
`-- kernel.img

2 directories, 6 files
@end example

The @file{menu.lst} contains the menu settings for @acronym{GRUB} along
with the boot commands for each entry.

@example
$ cat floppy/boot/grub/menu.lst
timeout 5
title RhythmOS
root (fd0)
kernel /kernel.img
modulenounzip (fd0)/filesystem.img

$ sudo mount src/grub.img floppy
@end example

If you can't mount @file{grub.img} to edit it this is OK because the
@file{grub.img} that comes with the source is already formated and for
updating the image we use @uref{http://www.gnu.org/s/mtools/, Mtools}
which doesn't require special permissions. See below for details...

Using @file{mk_boot_image.sh} makes sure to delete the old kernel image
and filesystem image from the @acronym{GRUB} image. It then writes the
kernel image (@file{kernel.img}) and filesystem image
(@file{kernel.img}) data to the GRUB image @file{grub.img}.

@example
# Delete old images
$ mdel -i grub.img ::kernel.img || true
$ mdel -i grub.img ::filesystem.img || true

# Copy updated images
$ mcopy -i grub.img kernel.img :: || exit 1
$ mcopy -i grub.img filesystem.img :: || exit 1
@end example

The @command{`make boot'} target executes @file{mk_boot_image.sh} for
you.

@node Running RhythmOS, Programming the kernel, Building RhythmOS, Top
@chapter Running RhythmOS

Once the kernel has been copied to the disk image, you can then run it
under qemu using one of the following commands:
@example
$ qemu -fda src/grub.img
$ qemu -daemonize -fda src/grub.img       # daemonize qemu
$ qemu -monitor stdio -fda src/grub.img   # output qemu debug on stdio
@end example

This same command can also be run through the @command{make} target
@code{run};
@example
$make run
@end example

To run without using the @file{grub.img} you can pass the kernel image
and filesystem image seperatly to QEMU.
@example
$ qemu -kernel src/kernel.img -initrd src/filesystem.img
@end example


@node Programming the kernel, Multitasking, Running RhythmOS, Top
@chapter Programming the kernel

@menu
* Assembly::                    
* C::                           
@end menu

@node  Assembly, C, Programming the kernel, Programming the kernel
@section Assembly


@node  C,  , Assembly, Programming the kernel
@section C
@cindex C

@menu
* The Run-Time Library::        
@end menu

@node The Run-Time Library,  , C, C
@subsection The Run-Time Library
@cindex RTL
@cindex Run-Time Library
@cindex compiler
@cindex OS
@cindex portable
@cindex kernel

A major part of writing code for your a kernel is getting suckered into
rewriting the @dfn{run-time library}, also known as @code{libc}. This is
because the @dfn{RTL} is the most @acronym{OS} @emph{dependent} part of
the compiler package: the C @acronym{RTL} provides enough functionality
to allow you to write @emph{portable} programs, but the inner workings
of the @acronym{RTL} are @emph{dependent} on the @acronym{OS} in use.

The aim is to replicate the library defined by the @dfn{ISO}
@footnote{International Standardization Organization} C standard because
this will make porting programs to my kernel easier. Writing a
non-standard library will only result in having to re-write any
application your trying to port; not to mention many open source
projects that do conform to these standards will be open for me to use.

@cindex open source


@node  Multitasking, Memory, Programming the kernel, Top
@chapter Multitasking

@node  Memory, Dynamic Memory Allocation, Multitasking, Top
@chapter Memory

@node  Dynamic Memory Allocation, System calls, Memory, Top
@chapter Dynamic Memory Allocation

@node  System calls, I/O, Dynamic Memory Allocation, Top
@chapter System calls

@example
@cartouche
        Source for system calls are located in @file{syscall.c},
@file{fscalls.c}, @file{filedesc.c}, @file{unixproc.c}, @file{pipe.c}.
@end cartouche
@end example

When the interrupt occurs, the CPU switches to kernel mode, and
executes the interrupt handler, which is actually implemented in
assembler within @file{start.s}. This pushes the register values onto
the stack, and then calls the @code{interrupt_handler} function, which is
implemented in @code{C}.  The registers that were put onto the stack are
available as a parameter to this function, as a regs object. The
interrupt handler then calls the @code{syscall} function, which inspects the
registers to determine which system call was requested, and then
dispatches to the appropriate handler function. 

For example the system call @code{write} is implemented by the handler
function @code{syscall_write}. The parameters to the system call may
be accessed by looking at the process's stack. One of the saved
registers is the stack pointer, which the syscall function uses to
determine the location in memory of the parameters, which it then
passes to the handler function. The handler for the system call then
performs whatever actions are necessary, which can include privileged
operations such as writing to any area of memory, since this code runs
in kernel mode. Once the handler function returns, control is passed
backwards along the same path, until it returns to the process that
was previously executing. In some cases, such as the read or exit
system calls, the process may have been killed or suspended. If this
is the case, syscall performs a context switch, so that a different
process will be executed when the interrupt handler returns.

The @code{exit} system call is used by a process to terminate itself. When
this call is made, the @code{kill_process} function is called, and the
handler function returns the special value @code{-ESUSPEND}, indicating to
the syscall dispatching function that the current process is no longer
running, and it should perform a context switch. Processes should
always call @code{exit} as their last action, to indicate the kernel that
they have no more instructions to be executed.

List of all the syscalls RhythmOS has available:
@example
@cartouche
          KERNEL             USER         LOCATION
          -----------------------------------------
          syscall_pipe       pipe         pipe.c
          syscall_getpid     getpid       syscall.c
          syscall_exit       exit         syscall.c
          syscall_write      write        syscall.c
          syscall_read       read         syscall.c
          syscall_geterrno   geterrno     syscall.c
          syscall_brk        brk          syscall.c
          syscall_send       send         syscall.c
          syscall_receive    receive      syscall.c
          syscall_kill       kill         syscall.c
          syscall_close      close        filedesc.c
          syscall_dup2       dup2         filedesc.c
          syscall_fork       fork         unixproc.c
          syscall_execve     execve       unixproc.c
          syscall_waitpid    waitpid      unixproc.c
          syscall_stat       stat         fscalls.c
          syscall_open       open         fscalls.c
          syscall_chdir      chdir        fscalls.c
          syscall_getcwd     getcwd       fscalls.c
          syscall_getdent    getdent      fscalls.c
@end cartouche
@end example


@node  I/O, Filesystems, System calls, Top
@chapter I/O

@node  Filesystems, Reporting bugs, I/O, Top
@chapter Filesystems

The contents of the root filesystem must be adequate to @emph{boot},
@emph{restore}, and/or @emph{recover} the system.

@itemize
@bullet{To @emph{boot} a system, enough must be present on the root
partition to mount other filesystems. This includes utilities,
configuration, boot loader information, and other essential start-up
data.}

@bullet{For the @emph{recovery} of a system, utilities are needed by the
user to diagnose and reconstruct the damaged system; these utilities
need be present on the root filesystem.}

@bullet{To @emph{restore} a system, those utilities needed to restore
from system backups (on floppy, tape, etc.) must be present on the root
filesystem.}
@end itemize

See
@uref{http://www.pathname.com/fhs/pub/fhs-2.3.html#THEROOTFILESYSTEM,
The Root Filesystem Standards} for more a more indepth analysis.

Below is an example of a root filesystem @file{/}. Ones marked with an
asterisk (@key{*}) are currently beind used by @code{RhythmOS}.

@table @code
@item @emph{Rootfs file system structure}

@item @file{/bin}
@key{*} Essential command binaries
@item @file{/boot}
Static files of the boot loader
@item @file{/dev}
Device files
@item @file{/etc}
@key{*} Host-specific system configuration
@item @file{/lib}
Essential shared libraries and kernel modules
@item @file{/media}
Mount point for removeable media
@item @file{/mnt}
Mount point for mounting a filesystem temporarily
@item @file{/opt}
Add-on application software packages
@item @file{/sbin}
Essential system binaries
@item @file{/srv}
Data for services provided by this system
@item @file{/tmp}
Temporary files
@item @file{/usr}
@key{*} Secondary hierarchy
@item @file{/var}
Variable data
@end table



@node  Reporting bugs,  , Filesystems, Top
@chapter Reporting bugs

@cindex bug reporting
@cindex problems
@cindex reporting bugs

To report bugs or suggest enhancements for RhythmOS, please send
electronic mail to @email{dustindorroh@@gmail.com}.

@c @include gnu.texi

@appendix GNU Free Documentation License

@include fdl.texi

@unnumbered Concept index

@printindex cp

@bye
